
name: Build, Test, and Release GUI

permissions:
  contents: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Build GUI and Tests
        run: |
          dotnet build ./BasicGUI/BasicGUI.csproj
          dotnet build ./BasicGUITests/BasicGUITests.csproj

  test:
    runs-on: windows-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Run Unit Tests
        run: dotnet test ./BasicGUITests/BasicGUITests.csproj

  release:
    runs-on: windows-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Publish GUI
        run: dotnet publish ./BasicGUI/BasicGUI.csproj -c Release -o ./release
      - name: Zip GUI Release
        run: |
          powershell Compress-Archive -Path ./release/* -DestinationPath ./release/BasicGUI.zip
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: "Release v${{ github.run_number }}"
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/BasicGUI.zip
          asset_name: BasicGUI.zip
          asset_content_type: application/zip
      - name: Trigger Integration pipeline
        if: success() # Only runs if previous steps succeeded
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.INTEGRATION_REPO_TOKEN }}
          repository: Axcelis/Integration
          event-type: upstream-ci-passed
          client-payload: '{"source":"controller"}' # or "gui" in GUI repo